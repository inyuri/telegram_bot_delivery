import logging

from telegram import InputMediaPhoto
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler,\
    ConversationHandler, filters

from config import BOT_TOKEN, YANDEX_GEOCODE_API_KEY, ADMIN_PASSWORD
from buttons import main_menu_buttons, back_button, menu_restaurant_buttons, menu_order, accept_menu_buttons, \
    scroll_menu_buttons, admin_panel_buttons, delete_pos_buttons, back_admin_panel_button
from data import db_session
from data.users import User
from data.foods import Food

import requests
import os


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

RESTAURANT_ADDRESS = '—É–ª–∏—Ü–∞ –≠–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, 1, –ë–∞–ª–∞—à–æ–≤, –°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'


async def start(update, context):
    context.user_data['order'] = {}
    context.user_data['number_phone'] = ''
    context.user_data['address'] = ''

    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}!\n'
                                    f'<b>–ú—ã —Ä–∞–¥—ã –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ</b>!',
                                    parse_mode='HTML')
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:', reply_markup=main_menu_buttons)


async def menu(update, context):
    db_sess = db_session.create_session()
    all_food = [(food.food_title, food.description, food.price, food.path_img)
                for food in db_sess.query(Food).all()]

    order_user = context.user_data['order']

    for food in all_food:
        order_user[food[0]] = 0

    list_of_food = []
    for title, desc, price, path_img in all_food:
        list_of_food.append(f'<b>{title}</b> - {desc} <b>–¶–µ–Ω–∞</b>: {price}')
    await update.callback_query.edit_message_text('<b>üìñ –ú–µ–Ω—é</b>:\n\n' + '\n\n'.join(list_of_food),
                                                  parse_mode='HTML',
                                                  reply_markup=menu_restaurant_buttons)


async def order(update, context):
    query = update.callback_query
    data = query.data
    db_sess = db_session.create_session()
    all_food = [(food.food_title, food.description, food.price, food.path_img)
                for food in db_sess.query(Food).all()]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ–∫
    order_user = context.user_data['order']
    for food in order_user.keys():
        if food == data:
            order_user[food] += 1

    list_of_food = []
    for title, desc, price, path_img in all_food:
        list_of_food.append(f'<b>{title}</b> - {desc} <b>–¶–µ–Ω–∞</b>: {price}')

    check_data = ''
    for food in order_user.keys():
        if order_user[food] != 0:
            check_data += food + ' x' + str(order_user[food]) + '\n'

    total = 0
    for food in order_user.keys():
        for food_massive in all_food:
            if order_user[food] != 0:
                if food == food_massive[0]:
                    total += order_user[food] * food_massive[2]

    await update.callback_query.edit_message_text('---\n–í–∞—à —á–µ–∫:\n'
                                                  + check_data +
                                                  '---\n<b>–ò—Ç–æ–≥–æ: </b>' + str(total) + '\n\n'
                                                  + '<b>üìñ –ú–µ–Ω—é</b>:\n\n'
                                                  + '\n\n'.join(list_of_food),
                                                  parse_mode='HTML',
                                                  reply_markup=menu_order)


async def make_order(update, context):
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.telegramId == update.effective_user.id).first()

    order_user = context.user_data['order']
    check_data = ''
    all_food = [(food.food_title, food.description, food.price, food.path_img)
                for food in db_sess.query(Food).all()]

    total = 0
    for food in order_user.keys():
        for food_massive in all_food:
            if order_user[food] != 0:
                if food == food_massive[0]:
                    total += order_user[food] * food_massive[2]

    if total > user.money:
        await update.callback_query.edit_message_text('<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                                                      reply_markup=back_button,
                                                      parse_mode='HTML')
    else:
        for food in order_user.keys():
            if order_user[food] != 0:
                check_data += food + ' x' + str(order_user[food]) + '\n'

        await update.callback_query.edit_message_text('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—Å—ë –≤–µ—Ä–Ω–æ?\n\n' +
                                                      '---\n–í–∞—à —á–µ–∫:\n'
                                                      + check_data + '---\n<b>–ò—Ç–æ–≥–æ: </b>' + str(total),
                                                      parse_mode='HTML',
                                                      reply_markup=accept_menu_buttons)


async def ask_address(update, context):
    await update.callback_query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É')
    return 1


async def ask_number_phone(update, context):
    context.user_data['address'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã —Å–º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.\n'
                                    '(–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ: "+79991234567")')
    return 2


async def success_order(update, context):
    try:
        context.user_data['number_phone'] = update.message.text
        if not (context.user_data['number_phone'][1:].isdigit() and len(context.user_data['number_phone']) == 12 and
                context.user_data['number_phone'].startswith('+7')):
            raise Exception
        db_sess = db_session.create_session()

        locations = [RESTAURANT_ADDRESS, context.user_data['address']]
        coordinates = []

        all_food = [(food.food_title, food.description, food.price, food.path_img)
                    for food in db_sess.query(Food).all()]

        order_user = context.user_data['order']
        total = 0
        for food in order_user.keys():
            for food_massive in all_food:
                if order_user[food] != 0:
                    if food == food_massive[0]:
                        total += order_user[food] * food_massive[2]

        for location in locations:
            url = f'https://geocode-maps.yandex.ru/1.x/?apikey={YANDEX_GEOCODE_API_KEY}&format=json&geocode={location}'
            response = requests.get(url).json()
            coordinates.append(response['response']['GeoObjectCollection']['featureMember']
                               [0]['GeoObject']['Point']['pos'])

        request = f'https://static-maps.yandex.ru/1.x/?ll={",".join(coordinates[1].split())}&spn=0.09,' \
                  f'0.09&l=map&pt={",".join(coordinates[0].split())},pm2wtm~{",".join(coordinates[1].split())},pm2wtm'
        response = requests.get(request)

        map_file = "map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)

        order_user = context.user_data['order']
        check_data = ''
        for food in order_user.keys():
            if order_user[food] != 0:
                check_data += food + ' x' + str(order_user[food]) + '\n'

        await context.bot.send_photo(update.effective_user.id, photo=open('map.png', 'rb'),
                                     caption=f'<b>üçΩÔ∏è –ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:</b> {RESTAURANT_ADDRESS}\n'
                                             f'<b>üè† –í–∞—à –∞–¥—Ä–µ—Å:</b> {context.user_data["address"]}\n'
                                             f'<b>‚òéÔ∏è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {context.user_data["number_phone"]}\n\n'
                                             f'---\n<b>–í–∞—à —á–µ–∫:</b>\n' + check_data + '---\n<b>–ò—Ç–æ–≥–æ: </b>'
                                             + str(total) + '\n\n' +
                                             f'<b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!</b> –ñ–¥–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.\n'
                                             f'<b>–ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤,'
                                             f' –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω –∑–∞ —Å—á—ë—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è!</b>', parse_mode='HTML')

        os.remove('map.png')

        user = db_sess.query(User).filter(User.telegramId == update.effective_user.id).first()
        user.amountOrders += 1
        user.money -= total
        db_sess.commit()
    except Exception:
        await update.message.reply_text('<b>–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å/—Ç–µ–ª–µ—Ñ–æ–Ω</b>.'
                                        ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.',
                                        reply_markup=back_button, parse_mode='HTML')

    return ConversationHandler.END


async def profile(update, context):
    db_sess = db_session.create_session()
    print(db_sess.query(User).all())

    if update.effective_user.id not in [user.telegramId for user in db_sess.query(User).all()]:
        user = User()
        user.telegramId = update.effective_user.id
        db_sess.add(user)
    db_sess.commit()

    user = db_sess.query(User).filter(User.telegramId == update.effective_user.id).first()

    await update.callback_query.edit_message_text(f'*üëÄ –ò–º—è*: {update.effective_user.first_name}\n\n'
                                                  f'*üÜî id*: {update.effective_user.id}\n\n'
                                                  f'*üí∏ –ë–∞–ª–∞–Ω—Å*: {user.money}\n\n'
                                                  f'*üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤*: {user.amountOrders}\n',
                                                  parse_mode='MarkdownV2',
                                                  reply_markup=back_button)


async def information(update, context):
    await update.callback_query.edit_message_text('<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω</b>: +7(800)555-35-35\n\n'
                                                  '<b>üë• –í–∫–æ–Ω—Ç–∞–∫—Ç–µ</b>: vk.com/DeliveryBot\n\n'
                                                  '<b>üåê –í–µ–±—Å–∞–π—Ç</b>: https://DeliveryBot.ru\n\n'
                                                  '<b>üìß –ü–æ—á—Ç–∞</b>: DeliveryBot@yandex.ru\n\n\n'
                                                  f'<b>üè† –ê–¥—Ä–µ—Å</b>: {RESTAURANT_ADDRESS}', parse_mode='HTML',
                                                  reply_markup=back_button)


# –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π "–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é"
async def look_menu(update, context):
    db_sess = db_session.create_session()

    info_food = [(food.path_img, food.food_title, food.description) for food in db_sess.query(Food).all()]
    context.user_data['current_index'] = 0
    current_index = context.user_data['current_index']
    message = await context.bot.send_photo(chat_id=update.effective_user.id,
                                           photo=open(info_food[current_index][0], mode='rb'),
                                           caption=f'<b>{info_food[context.user_data["current_index"] % len(info_food)][1]}</b>'
                                                   f' ({context.user_data["current_index"] % len(info_food) + 1}/{len(info_food)})\n'
                                                   f'{info_food[context.user_data["current_index"] % len(info_food)][2]}',
                                           reply_markup=scroll_menu_buttons, parse_mode='HTML')
    context.user_data['id_media_edit'] = message.message_id


async def scroll_image(update, context):
    db_sess = db_session.create_session()

    info_food = [(food.path_img, food.food_title, food.description) for food in db_sess.query(Food).all()]
    if update.callback_query.data == 'prev':
        context.user_data['current_index'] -= 1
    elif update.callback_query.data == 'next':
        context.user_data['current_index'] += 1
    info_index_food = info_food[context.user_data['current_index'] % len(info_food)]
    print(context.user_data['current_index'], context.user_data['current_index'] % len(info_food), len(info_food))
    await context.bot.edit_message_media(chat_id=update.effective_user.id,
                                         message_id=context.user_data['id_media_edit'],
                                         media=InputMediaPhoto(open(info_index_food[0], 'rb')),
                                         reply_markup=scroll_menu_buttons)
    await context.bot.edit_message_caption(chat_id=update.effective_user.id,
                                           message_id=context.user_data['id_media_edit'],
                                           caption=f'<b>{info_index_food[1]}</b>'
                                                   f' ({context.user_data["current_index"] % len(info_food) + 1}'
                                                   f'/{len(info_food)})\n'
                                                   f'{info_index_food[2]}',
                                           reply_markup=scroll_menu_buttons, parse_mode='HTML')


async def ask_password(update, context):
    await update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é. '
                                    '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    return 1


async def admin_panel(update, context):
    if ADMIN_PASSWORD == update.message.text:
        await update.message.reply_text('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>\n'
                                        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:',
                                        reply_markup=admin_panel_buttons, parse_mode='HTML')
    else:
        await update.message.reply_text('<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.', parse_mode='HTML')
    return ConversationHandler.END


async def delete_pos_menu(update, context):
    await update.callback_query.edit_message_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ –±–ª—é–¥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –º–µ–Ω—é:</b>',
                                                  reply_markup=delete_pos_buttons, parse_mode='HTML')


async def delete_pos(update, context):
    db_sess = db_session.create_session()
    all_food_titles = [food.food_title for food in db_sess.query(Food).all()]
    for food_title in all_food_titles:
        if food_title + '_delete' == update.callback_query.data:
            food_delete = db_sess.query(Food).filter(Food.food_title == food_title).first()
            food_delete_title = db_sess.query(Food).filter(Food.food_title == food_title).first().food_title
            print(food_delete_title)
            db_sess.delete(food_delete)
            db_sess.commit()
            await update.callback_query.edit_message_text(f'<b>–ë–ª—é–¥–æ {food_delete_title} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!</b>',
                                                          reply_markup=back_admin_panel_button, parse_mode='HTML')


async def add_pos_menu(update, context):
    await update.callback_query.edit_message_text('<b>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.</b>', parse_mode='HTML',
                                                  reply_markup=back_admin_panel_button)


async def back(update, context):
    await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:', reply_markup=main_menu_buttons)


async def back_admin_panel(update, context):
    await update.callback_query.edit_message_text('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>\n'
                                                  '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:',
                                                  reply_markup=admin_panel_buttons, parse_mode='HTML')
    return ConversationHandler.END


async def unknown_command(update, context):
    await update.message.reply_text('–ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞'
                                    ' —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')


async def fallback(update, context):
    await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞'
                                    ' —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')


async def delete_scroll(update, context):
    await context.bot.delete_message(chat_id=update.effective_user.id, message_id=context.user_data['id_media_edit'])


def main():
    db_session.global_init("db/users.db")
    db_sess = db_session.create_session()
    application = Application.builder().token(BOT_TOKEN).build()
    all_food = [(food.food_title, food.description, food.price, food.path_img) for food in db_sess.query(Food).all()]

    application.add_handler(CommandHandler("start", start))

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_panel_conv = ConversationHandler(
        entry_points=[CommandHandler("admin_panel", ask_password)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel)]
        },
        fallbacks=[],
        allow_reentry=True
    )
    application.add_handler(admin_panel_conv)
    application.add_handler(CallbackQueryHandler(back_admin_panel, pattern='back_admin_panel'))

    # –£–¥–∞–ª–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(delete_pos_menu, pattern='delete_pos_menu'))
    for food in all_food:
        application.add_handler(CallbackQueryHandler(delete_pos, pattern=food[0] + '_delete'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(add_pos_menu, pattern='add_pos_menu'))

    application.add_handler(CallbackQueryHandler(menu, pattern='menu'))

    for food in all_food:
        application.add_handler(CallbackQueryHandler(order, pattern=food[0]))
    application.add_handler(CallbackQueryHandler(menu, pattern='no'))

    user_info_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_address, pattern='yes')],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_number_phone)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, success_order)]
        },
        fallbacks=[],
        allow_reentry=True
    )

    application.add_handler(user_info_conv)

    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    application.add_handler(MessageHandler(filters.ALL, fallback))

    application.add_handler(CallbackQueryHandler(make_order, pattern='make_order'))
    application.add_handler(CallbackQueryHandler(profile, pattern='profile'))
    application.add_handler(CallbackQueryHandler(information, pattern='information'))
    application.add_handler(CallbackQueryHandler(look_menu, pattern='look_menu'))
    application.add_handler(CallbackQueryHandler(scroll_image, pattern='prev'))
    application.add_handler(CallbackQueryHandler(scroll_image, pattern='next'))
    application.add_handler(CallbackQueryHandler(delete_scroll, pattern='delete_scroll'))
    application.add_handler(CallbackQueryHandler(back, pattern='back'))

    application.run_polling()


if __name__ == '__main__':
    main()
